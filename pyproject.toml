[build-system]
requires = ["setuptools >= 42", "pybind11>=2.10.0"]
build-backend = "setuptools.build_meta"

# [project]
# name = "yuface"
# version = "2023.5.0"
# description = "A fast face detector."
# keywords = ["face detection"]
# authors = [
#   { name="Wwupup", email="12032501@mail.sustech.edu.cn" },
# ]
# readme = "README.md"
# requires-python = ">=3.6"
# license = { file = "LICENSE" }
# classifiers = [
#     "Programming Language :: Python",
#     "Programming Language :: Python :: 3",
#     "Programming Language :: Python :: 3 :: Only",
#     "Programming Language :: Python :: 3.6",
#     "Programming Language :: Python :: 3.7",
#     "Programming Language :: Python :: 3.8",
#     "Programming Language :: Python :: 3.9",
#     "Programming Language :: Python :: 3.10",
#     "Programming Language :: Python :: 3.11",
#     "Programming Language :: C++",
#     "License :: OSI Approved :: BSD License",
#     "Operating System :: POSIX :: Linux",
#     "Classifier: Operating System :: Microsoft :: Windows",
#     "Development Status :: 4 - Beta",
#     "Topic :: Scientific/Engineering",
#     "Topic :: Software Development",
#     "Intended Audience :: Developers",
# ]

# [project.urls]
# "Homepage" = "https://github.com/ShiqiYu/libfacedetection.pip"
# "Bug Tracker" = "https://github.com/ShiqiYu/libfacedetection.pip/issues"


# [tool.setuptools]
# packages = ["yuface"]
# package-dir = {"" = "src"}

[tool.cibuildwheel]
build = "*"
build-frontend = "pip"
config-settings = {}
dependency-versions = "pinned"
environment = {}
environment-pass = []
build-verbosity = 1

before-all = ""
before-build = ""

test-skip = ""
before-test = ""
test-extras = []
test-requires = "pytest"
test-command = "pytest {project}/tests"

container-engine = "docker"
skip = [
  "pp*",
  "*-win32",
  "*-manylinux_i686",
  "*-musllinux_*",
  "*-manylinux_aarch64",
  "*-manylinux_ppc64le",
  "*-manylinux_s390x",
]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"


[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-build = ["pip install delvewheel", "if exist build rmdir /s /q build"]
# repair-wheel-command = [
#   "delvewheel show -vv {wheel}",  
#   "delvewheel repair -vv -w {dest_dir} {wheel}"
# ]


[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"
archs = ["x86_64", "aarch64"]
before-build = "rm -rf {project}/build"

[tool.cibuildwheel.macos]
before-build = "rm -rf {project}/build"
archs = ["x86_64", "arm64"]
repair-wheel-command = "delocate-wheel -w {dest_dir} {wheel}"
# repair-wheel-command = [
#   "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
#   "pip run abi3audit --strict --report {wheel}",
# ]
